"use client";

import { useEffect, useState, FormEvent } from "react";
import { supabase } from "../../lib/supabase";
import toast, { Toaster } from "react-hot-toast";
import Swal from "sweetalert2";
import "sweetalert2/dist/sweetalert2.min.css";

interface Student {
  id?: string; // id is optional as it's generated by Supabase on insert
  name: string;
  email: string;
  phone_number: string; // Ensure this matches your Supabase column name
  gender: string;
}

export default function Home() {
  const [student, setStudent] = useState<Student[]>([]);
  const [form, setForm] = useState<Student>({
    name: "",
    email: "",
    phone_number: "",
    gender: "Male",
  });
  const [editId, setEditId] = useState<string | null>(null); // State to hold the ID of the student being edited

  // Function to fetch students from Supabase
  const fetchStudents = async () => {
    const { data, error } = await supabase.from("students").select("*");
    if (error) {
      console.error("Error fetching students:", error);
      toast.error("Failed to load students.");
    } else {
      setStudent(data || []);
    }
  };

  useEffect(() => {
    fetchStudents();
  }, []); 

 
  const handleAdd = async () => {
    const { data, error } = await supabase.from("students").insert([form]);

    if (error) {
      console.error("Supabase insert error:", error);
      toast.error(`Failed to register student: ${error.message}`);
    } else {
      toast.success("Student Registered Successfully");
      setForm({ name: "", email: "", phone_number: "", gender: "Male" }); 
      fetchStudents(); 
    }
  };

  
  const handleUpdate = async () => {
    if (!editId) return; // Should not happen if button is conditionally rendered

    const { data, error } = await supabase
      .from("students")
      .update(form) // Send the form data for update
      .eq("id", editId); // Update where id matches editId

    if (error) {
      console.error("Supabase update error:", error);
      toast.error(`Failed to update student: ${error.message}`);
    } else {
      toast.success("Student Updated Successfully");
      setForm({ name: "", email: "", phone_number: "", gender: "Male" }); // Clear the form
      setEditId(null); // Exit edit mode
      fetchStudents(); // Re-fetch the data to update the table
    }
  };

  // Main submit handler that decides between add or update
  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log("Form data : ", form);

    if (editId) {
      await handleUpdate();
    } else {
      await handleAdd();
    }
  };

 
  const handleDelete = async (id: string) => {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then(async (result) => {
      if (result.isConfirmed) {
        const { error } = await supabase.from("students").delete().eq("id", id);

        if (error) {
          console.error("Supabase delete error:", error);
          toast.error(`Failed to delete student: ${error.message}`);
        } else {
          toast.success("Student Deleted Successfully");
          fetchStudents(); // Re-fetch the data to update the table
        }
      }
    });
  };

  // Handles setting the form for editing
  const handlEdit = (s: Student) => {
    // Ensure that id is always a string when setting editId
    setForm(s);
    setEditId(s.id || null); // Set editId only if s.id is defined
  };

  return (
    <>
      <div className="container my-5">
        <Toaster />
        <h3 className="mb-4">Student Management</h3>
        <div className="row">
          {/* Left Side Form*/}
          <div className="col-md-4">
            <div className="card mb-4 ">
              <div className="card-body">
                <form onSubmit={handleSubmit}>
                  <div className="mb-3">
                    <label className="form-label">Name</label>
                    <input
                      type="text"
                      className="form-control"
                      value={form.name}
                      onChange={(e) =>
                        setForm({ ...form, name: e.target.value })
                      }
                      required
                    />
                  </div>
                  <div className="mb-3">
                    <label className="form-label">Email</label>
                    <input
                      type="email"
                      className="form-control"
                      value={form.email}
                      onChange={(e) =>
                        setForm({ ...form, email: e.target.value })
                      }
                      required
                    />
                  </div>
                  <div className="mb-3">
                    <label className="form-label">Phone Number</label>
                    <input
                      type="text"
                      className="form-control"
                      value={form.phone_number}
                      onChange={(e) =>
                        setForm({ ...form, phone_number: e.target.value })
                      }
                      required
                    />
                  </div>
                  <div className="mb-3">
                    <label className="form-label">Gender</label>
                    <select
                      className="form-select"
                      value={form.gender}
                      onChange={(e) =>
                        setForm({ ...form, gender: e.target.value })
                      }
                      required
                    >
                      <option value={"Male"}>Male</option>
                      <option value={"Female"}>Female</option>
                    </select>
                  </div>
                  <button type="submit" className="btn btn-primary w-100">
                    {editId ? "Update Student" : "Add Student"}
                  </button>
                  {editId && (
                    <button
                      type="button"
                      className="btn btn-secondary w-100 mt-2"
                      onClick={() => {
                        setEditId(null);
                        setForm({ name: "", email: "", phone_number: "", gender: "Male" });
                      }}
                    >
                      Cancel Edit
                    </button>
                  )}
                </form>
              </div>
            </div>
          </div>

          {/* Right Side Table*/}
          <div className="col-md-8">
            <div className="table-responsive">
              <table className="table table-bordered">
                <thead className="table-light">
                  <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Phone Number</th>
                    <th>Gender</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>
                  {student.length > 0 ? (
                    student.map((s) => (
                      <tr key={s.id}>
                        <td>{s.name}</td>
                        <td>{s.email}</td>
                        <td>{s.phone_number}</td>
                        <td>{s.gender}</td>
                        <td>
                          <button
                            className="btn btn-warning btn-sm me-2" // Corrected bt-sm to btn-sm
                            onClick={() => handlEdit(s)}
                          >
                            Edit
                          </button>
                          <button
                            className="btn btn-danger btn-sm me-2" // Corrected bt-sm to btn-sm
                            onClick={() => s.id && handleDelete(s.id)}
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={5} className="text-center">
                        No students found.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}